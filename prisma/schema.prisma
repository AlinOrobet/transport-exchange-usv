// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Company {
  id                  String    @id @default(auto()) @map("_id") @db.ObjectId
  accountType         String
  fiscalCode          String
  companyName         String
  address             String
  latitude            Float
  longitude           Float
  image               String?
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  subscription        String    @default("Free")
  subscriptionCreated DateTime?
  subscriptionExpires DateTime?
  userIds             User[]
}

model User {
  id                 String   @id @default(auto()) @map("_id") @db.ObjectId
  companyId          String   @db.ObjectId
  email              String   @unique
  hashedPassword     String
  image              String?
  firstName          String?
  lastName           String?
  phoneNumber        String?
  role               String?
  hasDefaultPassword Boolean?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  company            Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  languages          String[]

  conversationIds String[]       @db.ObjectId
  conversations   Conversation[] @relation(fields: [conversationIds], references: [id])

  seenMessageIds String[]  @db.ObjectId
  seenMessages   Message[] @relation("Seen", fields: [seenMessageIds], references: [id])

  messages Message[]
}

model Conversation {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt     DateTime @default(now())
  lastMessageAt DateTime @default(now())
  name          String?
  isGroup       Boolean?

  messagesIds String[]  @db.ObjectId
  messages    Message[]

  userIds String[] @db.ObjectId
  users   User[]   @relation(fields: [userIds], references: [id])
}

model Message {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  body      String?
  image     String?
  createdAt DateTime @default(now())

  seenIds String[] @db.ObjectId
  seen    User[]   @relation("Seen", fields: [seenIds], references: [id])

  conversationId String       @db.ObjectId
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  senderId String @db.ObjectId
  sender   User   @relation(fields: [senderId], references: [id], onDelete: Cascade)
}
